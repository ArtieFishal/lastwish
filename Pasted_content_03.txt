{
  "prompt": {
    "objective": "Build from scratch a production-ready, single-artifact React-based implementation of the Last Wish platform, a secure web application for creating a notarizable addendum to a will or trust for cryptocurrency assets, as specified in the provided Product Requirements Document (PRD). The implementation must address deficiencies in prior prototypes (simulated wallet connections, no PDF generation, no payment processing, no backend, no notifications, incomplete legal guidance, security/performance gaps) and resolve the 'unexpected error' encountered previously. Deliver a complete, deployable application integrating all functional and non-functional requirements, ensuring robust error handling, security, accessibility, and compliance with U.S. estate planning laws.",
    "input_context": {
      "prd": {
        "description": "JSON-formatted PRD specifying requirements for the Last Wish platform to create a notarizable cryptocurrency addendum, excluding sensitive data (seed phrases, private keys, passwords), which are stored separately by users in a secure location (e.g., safe-deposit box).",
        "functional_requirements": {
          "user_account_management": [
            "Account creation with email/password or SSO (Google, Apple).",
            "Collect personal information (name, address, date of birth, executor details, digital executor details).",
            "Implement 2FA (email/SMS) and account recovery (security questions, backup codes)."
          ],
          "blockchain_wallet_integration": [
            "Use WalletConnect v2 for secure, temporary connections to Ethereum, Solana, Bitcoin, supporting MetaMask, Phantom, Trust Wallet.",
            "Fetch read-only asset data (token balances, NFTs) via public APIs (Etherscan, Solscan, Blockstream).",
            "Enable linking of verified assets to beneficiaries (name, email, relationship).",
            "Prevent collection/storage/display of seed phrases, private keys, passwords with explicit UI warnings."
          ],
          "addendum_creation": [
            "Provide a guided form to display verified assets, assign beneficiaries, specify discovery instructions (e.g., 'Credentials in safe-deposit box at [bank name]'), and add optional notes.",
            "Offer templates compliant with general U.S. estate laws (e.g., Uniform Probate Code).",
            "Support designation of a digital executor for cryptocurrency management.",
            "Implement form validation to block sensitive data entry (e.g., regex for seed phrases)."
          ],
          "printable_hardcopy_output": [
            "Generate a notarizable PDF including verified assets (wallet addresses, asset types, quantities), beneficiaries, discovery instructions, personal info, notary block, and legal disclaimers.",
            "Exclude seed phrases, private keys, passwords, with a disclaimer reinforcing separate storage.",
            "Provide a downloadable memorandum template for credential storage guidance.",
            "Use professional typography (Times New Roman, 12pt) for A4/Letter printing, max 10MB file size.",
            "Support secure PDF download via AWS S3 and optional email delivery.",
            "Include a notarization guide with state-specific instructions."
          ],
          "cryptocurrency_payment_processing": [
            "Integrate CoinPayments or BitPay for BTC, ETH, USDC, SOL, LTC payments.",
            "Support one-time ($49, $149, $499) or subscription fees with real-time USD-to-crypto conversion (CoinGecko API).",
            "Display tax disclaimers (capital gains, estate tax) and support refunds within 24 hours.",
            "Store payment transactions with on-chain verification."
          ],
          "user_interface": [
            "Provide a dashboard displaying wallet status, verified assets, addendum drafts, payment history, and calls-to-action (Connect Wallet, Create Addendum, View Pricing).",
            "Include navigation for wallet connection, addendum creation, payments, legal guide.",
            "Use empathetic, professional design (soft blues, high contrast) with WCAG 2.1 Level AA compliance.",
            "Display prominent warnings against entering sensitive data.",
            "Ensure responsive design for desktop, tablet, mobile."
          ],
          "notifications": [
            "Send email alerts for account activity, payment confirmations, asset verification, addendum completion (SendGrid/AWS SES).",
            "Support optional post-demise beneficiary notifications, triggered by executor or timer (cron job)."
          ],
          "legal_guidance": [
            "Provide an in-app FAQ on IRS rules (cryptocurrencies as property), sensitive data exclusion, digital executor roles, tax implications (estate tax, step-up basis), and state-specific notarization.",
            "Include disclaimers stating templates are not legal advice and recommend attorney consultation.",
            "Offer guidance on secure storage (safe-deposit box, fireproof safe) in UI and memorandum template."
          ]
        },
        "non_functional_requirements": {
          "security": [
            "Implement AES-256 encryption for data at rest and TLS 1.3 for data in transit.",
            "Ensure GDPR, CCPA, RUFADAA compliance for user consent and fiduciary access.",
            "Exclude storage of sensitive data (seed phrases, private keys, passwords).",
            "Configure daily encrypted backups with 30-day retention."
          ],
          "performance": [
            "Achieve 2-second page load time with code splitting and lazy loading.",
            "Ensure blockchain API queries return within 3 seconds with fallback providers (e.g., Alchemy).",
            "Target 99.9% uptime with auto-scaling.",
            "Support 5,000 concurrent users."
          ],
          "accessibility": "Comply with WCAG 2.1 Level AA (ARIA labels, keyboard navigation, screen reader support)."
        },
        "technical_requirements": [
          "Frontend: React.js with Web3.js or Ethers.js, Tailwind CSS for styling.",
          "Backend: Node.js/Express or FastAPI, PostgreSQL for user/payment data, MongoDB for session data.",
          "Blockchain: WalletConnect v2, Etherscan/Solscan/Blockstream APIs.",
          "Payments: CoinPayments or BitPay API.",
          "Storage: AWS S3 for PDFs.",
          "Hosting: AWS or Vercel with CDN.",
          "Monitoring: Sentry for errors, AWS CloudWatch for performance."
        ],
        "legal_context": [
          "Cryptocurrencies are property per IRS, subject to estate tax ($13.99M exemption, 2025) and capital gains (step-up basis).",
          "Exclude sensitive data from addendum due to public probate records.",
          "Require tech-savvy digital executor for credential access.",
          "Templates must align with general U.S. estate laws, noting state variations."
        ],
        "success_metrics": [
          "500 registered users within 3 months.",
          "60% engagement (asset verification, beneficiary assignment within 7 days).",
          "80% payment conversion rate.",
          "Net Promoter Score (NPS) of 50+."
        ],
        "constraints": [
          "Support only Ethereum, Solana, Bitcoin in MVP.",
          "Limit PDF file size to 10MB.",
          "Exclude storage of sensitive data.",
          "Complete within 4-6 month timeline."
        ]
      },
      "prior_code_deficiencies": {
        "description": "Previous React code (LastWishPlatform) was a frontend prototype with simulated functionalities, failing to deliver a production-ready artifact.",
        "issues": [
          "Simulated wallet connections (mock data) instead of WalletConnect v2 and real APIs (Etherscan, Solscan).",
          "Simulated PDF generation (alert) without jsPDF, formatting, delivery, or memorandum template.",
          "No payment processing (CoinPayments/BitPay), tax disclaimers, or refund logic.",
          "No backend (Node.js, PostgreSQL/MongoDB) or AWS S3 storage.",
          "No notifications (SendGrid/AWS SES) or post-demise beneficiary alerts.",
          "No account creation, SSO, 2FA, or recovery mechanisms.",
          "Incomplete legal guidance (missing FAQ, limited storage guidance).",
          "No security (AES-256, TLS 1.3), performance optimizations, or WCAG 2.1 compliance.",
          "No error handling for 'unexpected error,' likely due to missing integrations or processing limitations."
        ]
      },
      "error_context": {
        "description": "Claude's 'unexpected error' indicates failure to process full implementation, possibly due to complexity, missing dependencies (WalletConnect, jsPDF, payment APIs), or resource limitations.",
        "implication": "Prior code remained a prototype, identical across submissions, failing to address PRD requirements."
      },
      "goal": "Deliver a single, production-ready artifact built from scratch, integrating all PRD requirements, addressing prior deficiencies, and resolving error causes for a deployable, error-free application."
    },
    "instructions": [
      {
        "task": "Build Frontend from Scratch",
        "details": [
          "Create a React.js application with Tailwind CSS, structured as a single-page application with views for dashboard, wallet connection, addendum creation, pricing, and legal guidance.",
          "Implement responsive UI (desktop, tablet, mobile) with soft blues, high contrast, and empathetic design.",
          "Include navigation for Dashboard, Connect Wallet, Create Addendum, Pricing, Legal Guide.",
          "Add WCAG 2.1 Level AA compliance (ARIA labels, keyboard navigation, screen reader support), tested with Lighthouse.",
          "Display prominent warnings in wallet and form views: 'NEVER enter seed phrases, private keys, or passwords; store separately in a secure location.'"
        ]
      },
      {
        "task": "Implement User Account Management",
        "subtasks": [
          "Use Firebase Authentication or Auth0 for account creation (email/password, Google/Apple SSO).",
          "Implement 2FA (email/SMS) and recovery (security questions, backup codes).",
          "Create a form to collect personal info (firstName, lastName, address, city, state, zipCode, dateOfBirth, executorName, executorEmail, digitalExecutorName, digitalExecutorEmail).",
          "Store user data in PostgreSQL via backend API, encrypted with AES-256."
        ]
      },
      {
        "task": "Implement Blockchain Wallet Integration",
        "subtasks": [
          "Integrate WalletConnect v2 (@walletconnect/web3-provider) for secure, temporary connections to Ethereum (MetaMask), Solana (Phantom), Bitcoin (Trust Wallet).",
          "Use Ethers.js to fetch read-only asset data (token balances, NFTs) via Etherscan (Ethereum), Solscan (Solana), Blockstream (Bitcoin) APIs.",
          "Display assets (wallet address, name, symbol, balance, value) in wallet view, with 'View on Explorer' links to respective blockchains.",
          "Enable assignment of verified assets to beneficiaries (name, email, relationship) via dropdowns.",
          "Implement regex-based validation to block seed phrases/private keys in inputs, with UI warnings.",
          "Store session data (connected wallet, assets) in MongoDB, ensuring no sensitive data is saved."
        ]
      },
      {
        "task": "Implement Addendum Creation",
        "subtasks": [
          "Create a guided form to display verified assets, assign beneficiaries, specify discovery instructions (textarea for 'Credentials stored at [location]'), and add optional notes.",
          "Provide templates compliant with U.S. estate laws (Uniform Probate Code), with fields for assets, beneficiaries, digital executor, and notary block.",
          "Support digital executor designation (name, email, phone).",
          "Add form validation to prevent sensitive data entry, with alerts for invalid inputs."
        ]
      },
      {
        "task": "Implement Printable Hardcopy Output",
        "subtasks": [
          "Use jsPDF to generate a notarizable PDF with assets (wallet address, type, quantity), beneficiaries, discovery instructions, personal info, notary block, and disclaimer ('Not legal advice; consult an attorney').",
          "Ensure PDF excludes seed phrases, private keys, passwords, with a disclaimer reinforcing separate storage.",
          "Generate a separate memorandum template (PDF) with guidance for credential storage (e.g., safe-deposit box, fireproof safe).",
          "Format PDFs for A4/Letter (Times New Roman, 12pt), max 10MB, stored in AWS S3.",
          "Support secure download via signed S3 URLs and optional email delivery (SendGrid, encrypted).",
          "Include a downloadable notarization guide PDF with state-specific instructions (e.g., notary requirements for CA, NY, TX, FL)."
        ]
      },
      {
        "task": "Implement Cryptocurrency Payment Processing",
        "subtasks": [
          "Integrate CoinPayments or BitPay API for payments in BTC, ETH, USDC, SOL, LTC.",
          "Implement pricing plans: Basic ($49, single wallet, 3 beneficiaries), Premium ($149, multiple wallets, unlimited beneficiaries, advanced templates), Enterprise ($499, multi-sig, tax guidance).",
          "Use CoinGecko API for real-time USD-to-crypto conversion, displayed in pricing view.",
          "Add tax disclaimer: 'Payments may have capital gains or estate tax implications; consult a tax professional.'",
          "Support refunds within 24 hours if addendum is not finalized, with backend logic.",
          "Store payment transactions in PostgreSQL, verified on-chain."
        ]
      },
      {
        "task": "Implement Notifications",
        "subtasks": [
          "Use SendGrid or AWS SES for email alerts on account activity, payment confirmations, asset verification, and addendum completion.",
          "Implement optional post-demise beneficiary notifications (email with discovery instructions), triggered by executor or cron job (backend timer).",
          "Store notification preferences in PostgreSQL."
        ]
      },
      {
        "task": "Implement Legal Guidance",
        "subtasks": [
          "Create an in-app Legal Guide page with FAQ on IRS rules (cryptocurrencies as property), sensitive data exclusion, digital executor roles, tax implications (estate tax, step-up basis), and notarization requirements.",
          "Add disclaimers in form, PDF, and footer: 'Templates for educational purposes only; consult an estate planning attorney.'",
          "Provide secure storage guidance in UI and memorandum: 'Store credentials in a safe-deposit box or fireproof safe, separate from the addendum.'"
        ]
      },
      {
        "task": "Implement Backend",
        "subtasks": [
          "Develop a Node.js/Express or FastAPI server with RESTful APIs for user management, wallet sessions, payments, and PDF storage.",
          "Use PostgreSQL for user data, payment records, and notification preferences.",
          "Use MongoDB for temporary session data (wallet connections, assets).",
          "Implement AES-256 encryption for data at rest and TLS 1.3 for API communication."
        ]
      },
      {
        "task": "Address Non-Functional Requirements",
        "subtasks": [
          {
            "security": [
              "Use Node.js crypto libraries for AES-256 encryption and TLS 1.3.",
              "Ensure GDPR/CCPA/RUFADAA compliance with consent forms and fiduciary access logic.",
              "Configure AWS Backup for daily encrypted backups, 30-day retention."
            ]
          },
          {
            "performance": [
              "Optimize React with code splitting and lazy loading for 2-second page loads.",
              "Use fallback API providers (e.g., Alchemy for Ethereum) for 3-second query latency.",
              "Deploy on AWS/Vercel with auto-scaling for 99.9% uptime and 5,000 concurrent users."
            ]
          },
          {
            "accessibility": [
              "Add ARIA labels, keyboard navigation, and screen reader support.",
              "Test with Lighthouse for WCAG 2.1 Level AA compliance."
            ]
          }
        ]
      },
      {
        "task": "
(Content truncated due to size limit. Use line ranges to read in chunks)