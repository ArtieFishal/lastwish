{
  "name": "Last Wish Platform - Complete User Journey",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "user-registration",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-user-registration",
      "name": "User Registration Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "user-registration-webhook"
    },
    {
      "parameters": {
        "jsCode": "// User Registration Processing\nconst userData = $input.first().json;\n\n// Validate required fields\nconst requiredFields = ['email', 'password', 'firstName', 'lastName', 'state'];\nconst missingFields = requiredFields.filter(field => !userData[field]);\n\nif (missingFields.length > 0) {\n  return {\n    success: false,\n    error: `Missing required fields: ${missingFields.join(', ')}`,\n    code: 'VALIDATION_ERROR'\n  };\n}\n\n// Email validation\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nif (!emailRegex.test(userData.email)) {\n  return {\n    success: false,\n    error: 'Invalid email format',\n    code: 'INVALID_EMAIL'\n  };\n}\n\n// Generate user ID and verification token\nconst userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\nconst verificationToken = Math.random().toString(36).substr(2, 32);\nconst verificationExpiry = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n// Prepare user data for database\nconst processedUser = {\n  id: userId,\n  email: userData.email.toLowerCase(),\n  firstName: userData.firstName,\n  lastName: userData.lastName,\n  state: userData.state,\n  passwordHash: userData.password, // Will be hashed in next node\n  verificationToken: verificationToken,\n  verificationExpiry: verificationExpiry.toISOString(),\n  isVerified: false,\n  createdAt: new Date().toISOString(),\n  status: 'pending_verification',\n  subscriptionTier: 'free',\n  complianceScore: 0\n};\n\nreturn {\n  success: true,\n  user: processedUser,\n  verificationUrl: `https://lastwish.platform/verify?token=${verificationToken}&user=${userId}`\n};"
      },
      "id": "process-registration",
      "name": "Process Registration",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "table": "users",
        "columns": "id, email, first_name, last_name, state, password_hash, verification_token, verification_expiry, is_verified, created_at, status, subscription_tier, compliance_score",
        "additionalFields": {}
      },
      "id": "save-user-db",
      "name": "Save User to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        680,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-lastwish",
          "name": "Last Wish Database"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "noreply@lastwish.platform",
        "toEmail": "={{ $node['Process Registration'].json.user.email }}",
        "subject": "Welcome to Last Wish - Verify Your Account",
        "emailType": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Welcome to Last Wish</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; margin: 0; padding: 20px; }\n        .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; }\n        .logo { font-size: 28px; font-weight: bold; background: linear-gradient(135deg, #3b82f6, #8b5cf6); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }\n        .button { display: inline-block; padding: 15px 30px; background: linear-gradient(135deg, #3b82f6, #8b5cf6); color: white; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; }\n        .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; text-align: center; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <div class=\"logo\">Last Wish</div>\n            <h2>Welcome to Secure Cryptocurrency Estate Planning</h2>\n        </div>\n        \n        <p>Dear {{ $node['Process Registration'].json.user.firstName }},</p>\n        \n        <p>Thank you for joining Last Wish, the premier platform for cryptocurrency estate planning. We're excited to help you secure your digital legacy for your loved ones.</p>\n        \n        <p>To complete your registration and access your account, please verify your email address by clicking the button below:</p>\n        \n        <div style=\"text-align: center;\">\n            <a href=\"{{ $node['Process Registration'].json.verificationUrl }}\" class=\"button\">Verify My Account</a>\n        </div>\n        \n        <p>This verification link will expire in 24 hours for security purposes.</p>\n        \n        <p><strong>What's Next?</strong></p>\n        <ul>\n            <li>Complete your profile with personal and legal information</li>\n            <li>Connect your cryptocurrency wallets for asset discovery</li>\n            <li>Generate your personalized estate planning documents</li>\n            <li>Ensure legal compliance with your state's requirements</li>\n        </ul>\n        \n        <p>If you have any questions or need assistance, our support team is here to help at support@lastwish.platform.</p>\n        \n        <p>Best regards,<br>The Last Wish Team</p>\n        \n        <div class=\"footer\">\n            <p>Last Wish Platform | Secure Your Crypto Legacy</p>\n            <p>If you didn't create this account, please ignore this email.</p>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "send-verification-email",
      "name": "Send Verification Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        900,
        300
      ],
      "credentials": {
        "smtp": {
          "id": "smtp-lastwish",
          "name": "Last Wish SMTP"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Registration successful. Please check your email to verify your account.\",\n  \"userId\": $node['Process Registration'].json.user.id\n} }}"
      },
      "id": "registration-response",
      "name": "Registration Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "verify-email",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-email-verification",
      "name": "Email Verification Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        500
      ],
      "webhookId": "email-verification-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Email Verification Processing\nconst query = $input.first().json.query;\nconst token = query.token;\nconst userId = query.user;\n\nif (!token || !userId) {\n  return {\n    success: false,\n    error: 'Missing verification token or user ID',\n    redirect: '/verification-error'\n  };\n}\n\nreturn {\n  success: true,\n  token: token,\n  userId: userId\n};"
      },
      "id": "process-verification",
      "name": "Process Verification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        500
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE users SET is_verified = true, status = 'active', verified_at = NOW() WHERE id = '{{ $node['Process Verification'].json.userId }}' AND verification_token = '{{ $node['Process Verification'].json.token }}' AND verification_expiry > NOW()",
        "additionalFields": {}
      },
      "id": "verify-user-db",
      "name": "Verify User in Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        680,
        500
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-lastwish",
          "name": "Last Wish Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "redirect",
        "redirectURL": "https://lastwish.platform/dashboard?verified=true"
      },
      "id": "verification-success-response",
      "name": "Verification Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        900,
        500
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "wallet-connect",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-wallet-connect",
      "name": "Wallet Connect Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        700
      ],
      "webhookId": "wallet-connect-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Wallet Connection Processing\nconst walletData = $input.first().json;\n\n// Validate wallet connection data\nif (!walletData.userId || !walletData.walletAddress || !walletData.walletType) {\n  return {\n    success: false,\n    error: 'Missing required wallet connection data'\n  };\n}\n\n// Validate wallet address format (basic validation)\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/; // Ethereum address format\nif (!addressRegex.test(walletData.walletAddress)) {\n  return {\n    success: false,\n    error: 'Invalid wallet address format'\n  };\n}\n\n// Prepare wallet data\nconst walletInfo = {\n  userId: walletData.userId,\n  walletAddress: walletData.walletAddress.toLowerCase(),\n  walletType: walletData.walletType,\n  chainId: walletData.chainId || 1, // Default to Ethereum mainnet\n  connectedAt: new Date().toISOString(),\n  isActive: true\n};\n\nreturn {\n  success: true,\n  wallet: walletInfo\n};"
      },
      "id": "process-wallet-connection",
      "name": "Process Wallet Connection",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        700
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "table": "user_wallets",
        "columns": "user_id, wallet_address, wallet_type, chain_id, connected_at, is_active",
        "additionalFields": {}
      },
      "id": "save-wallet-db",
      "name": "Save Wallet to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        680,
        700
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-lastwish",
          "name": "Last Wish Database"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.etherscan.io/api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "module",
              "value": "account"
            },
            {
              "name": "action",
              "value": "balance"
            },
            {
              "name": "address",
              "value": "={{ $node['Process Wallet Connection'].json.wallet.walletAddress }}"
            },
            {
              "name": "tag",
              "value": "latest"
            },
            {
              "name": "apikey",
              "value": "{{ $credentials.etherscan.apiKey }}"
            }
          ]
        },
        "options": {}
      },
      "id": "fetch-wallet-balance",
      "name": "Fetch Wallet Balance",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        900,
        700
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "etherscan-api",
          "name": "Etherscan API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process Asset Discovery\nconst walletData = $node['Process Wallet Connection'].json.wallet;\nconst balanceData = $input.first().json;\n\n// Convert Wei to ETH\nconst ethBalance = balanceData.result ? (parseInt(balanceData.result) / Math.pow(10, 18)) : 0;\n\n// Prepare asset data\nconst assetData = {\n  userId: walletData.userId,\n  walletAddress: walletData.walletAddress,\n  assetType: 'ETH',\n  assetSymbol: 'ETH',\n  balance: ethBalance,\n  valueUSD: 0, // Will be calculated in next step\n  lastUpdated: new Date().toISOString(),\n  network: 'ethereum'\n};\n\nreturn {\n  success: true,\n  asset: assetData,\n  wallet: walletData\n};"
      },
      "id": "process-asset-discovery",
      "name": "Process Asset Discovery",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        700
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "table": "user_assets",
        "columns": "user_id, wallet_address, asset_type, asset_symbol, balance, value_usd, last_updated, network",
        "additionalFields": {}
      },
      "id": "save-assets-db",
      "name": "Save Assets to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1340,
        700
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-lastwish",
          "name": "Last Wish Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Wallet connected successfully\",\n  \"wallet\": $node['Process Asset Discovery'].json.wallet,\n  \"assets\": [$node['Process Asset Discovery'].json.asset]\n} }}"
      },
      "id": "wallet-connect-response",
      "name": "Wallet Connect Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1560,
        700
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "payment-process",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-payment-process",
      "name": "Payment Process Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        900
      ],
      "webhookId": "payment-process-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Payment Processing\nconst paymentData = $input.first().json;\n\n// Validate payment data\nif (!paymentData.userId || !paymentData.planType || !paymentData.paymentMethod) {\n  return {\n    success: false,\n    error: 'Missing required payment data'\n  };\n}\n\n// Define pricing plans\nconst plans = {\n  basic: { price: 29.99, name: 'Basic Addendum' },\n  premium: { price: 79.99, name: 'Premium Package' },\n  enterprise: { price: 199.99, name: 'Enterprise Solution' }\n};\n\nconst selectedPlan = plans[paymentData.planType];\nif (!selectedPlan) {\n  return {\n    success: false,\n    error: 'Invalid plan type'\n  };\n}\n\n// Generate payment ID\nconst paymentId = `pay_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// Prepare payment record\nconst paymentRecord = {\n  id: paymentId,\n  userId: paymentData.userId,\n  planType: paymentData.planType,\n  planName: selectedPlan.name,\n  amount: selectedPlan.price,\n  currency: 'USD',\n  paymentMethod: paymentData.paymentMethod,\n  status: 'processing',\n  createdAt: new Date().toISOString()\n};\n\nreturn {\n  success: true,\n  payment: paymentRecord\n};"
      },
      "id": "process-payment",
      "name": "Process Payment",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        900
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "table": "payments",
        "columns": "id, user_id, plan_type, plan_name, amount, currency, payment_method, status, created_at",
        "additionalFields": {}
      },
      "id": "save-payment-db",
      "name": "Save Payment to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        680,
        900
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-lastwish",
          "name": "Last Wish Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Simulate Payment Gateway Processing\nconst paymentData = $node['Process Payment'].json.payment;\n\n// Simulate payment processing (in real implementation, this would call actual payment gateway)\nconst isSuccessful = Math.random() > 0.1; // 90% success rate for simulation\n\nif (isSuccessful) {\n  return {\n    success: true,\n    paymentId: paymentData.id,\n    status: 'completed',\n    transactionId: `txn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    completedAt: new Date().toISOString()\n  };\n} else {\n  return {\n    success: false,\n    paymentId: paymentData.id,\n    status: 'failed',\n    error: 'Payment processing failed',\n    failedAt: new Date().toISOString()\n  };\n}"
      },
      "id": "simulate-payment-gateway",
      "name": "Simulate Payment Gateway",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        900
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE payments SET status = '{{ $node['Simulate Payment Gateway'].json.status }}', transaction_id = '{{ $node['Simulate Payment Gateway'].json.transactionId }}', completed_at = '{{ $node['Simulate Payment Gateway'].json.completedAt }}' WHERE id = '{{ $node['Simulate Payment Gateway'].json.paymentId }}'",
        "additionalFields": {}
      },
      "id": "update-payment-status",
      "name": "Update Payment Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1120,
        900
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-lastwish",
          "name": "Last Wish Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "payment-success-condition",
              "leftValue": "={{ $node['Simulate Payment Gateway'].json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "payment-success-check",
      "name": "Payment Success Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        900
      ]
    },
    {
      "parameters": {
        "fromEmail": "noreply@lastwish.platform",
        "toEmail": "={{ $node['Process Payment'].json.payment.userId }}@example.com",
        "subject": "Payment Confirmation - Last Wish Platform",
        "emailType": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Payment Confirmation</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; margin: 0; padding: 20px; }\n        .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; }\n        .logo { font-size: 28px; font-weight: bold; background: linear-gradient(135deg, #3b82f6, #8b5cf6); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }\n        .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 15px; border-radius: 5px; margin: 20px 0; }\n        .details { background: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; }\n        .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; text-align: center; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <div class=\"logo\">Last Wish</div>\n            <h2>Payment Confirmation</h2>\n        </div>\n        \n        <div class=\"success\">\n            <strong>✅ Payment Successful!</strong><br>\n            Your subscription has been activated.\n        </div>\n        \n        <div class=\"details\">\n            <h3>Payment Details</h3>\n            <p><strong>Plan:</strong> {{ $node['Process Payment'].json.payment.planName }}</p>\n            <p><strong>Amount:</strong> ${{ $node['Process Payment'].json.payment.amount }}</p>\n            <p><strong>Transaction ID:</strong> {{ $node['Simulate Payment Gateway'].json.transactionId }}</p>\n            <p><strong>Date:</strong> {{ $node['Simulate Payment Gateway'].json.completedAt }}</p>\n        </div>\n        \n        <p>You can now access all features of your selected plan. Start creating your cryptocurrency estate planning documents today!</p>\n        \n        <div class=\"footer\">\n            <p>Last Wish Platform | Secure Your Crypto Legacy</p>\n            <p>Questions? Contact us at support@lastwish.platform</p>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "send-payment-confirmation",
      "name": "Send Payment Confirmation",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1560,
        800
      ],
      "credentials": {
        "smtp": {
          "id": "smtp-lastwish",
          "name": "Last Wish SMTP"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Payment processed successfully\",\n  \"paymentId\": $node['Simulate Payment Gateway'].json.paymentId,\n  \"transactionId\": $node['Simulate Payment Gateway'].json.transactionId,\n  \"status\": \"completed\"\n} }}"
      },
      "id": "payment-success-response",
      "name": "Payment Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        800
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": false,\n  \"message\": \"Payment processing failed\",\n  \"paymentId\": $node['Simulate Payment Gateway'].json.paymentId,\n  \"error\": $node['Simulate Payment Gateway'].json.error,\n  \"status\": \"failed\"\n} }}"
      },
      "id": "payment-failure-response",
      "name": "Payment Failure Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        1000
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-document",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-generate-document",
      "name": "Generate Document Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        1200
      ],
      "webhookId": "generate-document-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Document Generation Processing\nconst documentData = $input.first().json;\n\n// Validate document generation data\nif (!documentData.userId || !documentData.documentType) {\n  return {\n    success: false,\n    error: 'Missing required document generation data'\n  };\n}\n\n// Generate document ID\nconst documentId = `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// Prepare document metadata\nconst documentMetadata = {\n  id: documentId,\n  userId: documentData.userId,\n  documentType: documentData.documentType,\n  status: 'generating',\n  createdAt: new Date().toISOString(),\n  title: `Cryptocurrency Estate Planning ${documentData.documentType}`,\n  version: '1.0'\n};\n\nreturn {\n  success: true,\n  document: documentMetadata\n};"
      },
      "id": "process-document-generation",
      "name": "Process Document Generation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        1200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT u.*, p.plan_type, p.status as payment_status FROM users u LEFT JOIN payments p ON u.id = p.user_id WHERE u.id = '{{ $node['Process Document Generation'].json.document.userId }}' AND u.is_verified = true",
        "additionalFields": {}
      },
      "id": "fetch-user-data",
      "name": "Fetch User Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        680,
        1200
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-lastwish",
          "name": "Last Wish Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM user_assets WHERE user_id = '{{ $node['Process Document Generation'].json.document.userId }}'",
        "additionalFields": {}
      },
      "id": "fetch-user-assets",
      "name": "Fetch User Assets",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        900,
        1200
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-lastwish",
          "name": "Last Wish Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate Legal Document Content\nconst documentMeta = $node['Process Document Generation'].json.document;\nconst userData = $node['Fetch User Data'].json[0];\nconst userAssets = $node['Fetch User Assets'].json;\n\n// Calculate total portfolio value\nconst totalValue = userAssets.reduce((sum, asset) => sum + (asset.value_usd || 0), 0);\n\n// Generate document content\nconst documentContent = `\nCRYPTOCURRENCY ESTATE PLANNING ADDENDUM\n\nI, ${userData.first_name} ${userData.last_name}, a resident of ${userData.state}, hereby create this addendum to my Last Will and Testament to specifically address my cryptocurrency and digital asset holdings.\n\nDIGITAL ASSET INVENTORY:\n\n${userAssets.map(asset => \n  `- ${asset.asset_symbol}: ${asset.balance} (Wallet: ${asset.wallet_address})`\n).join('\\n')}\n\nTotal Estimated Value: $${totalValue.toFixed(2)} USD (as of ${new Date().toLocaleDateString()})\n\nINSTRUCTIONS FOR BENEFICIARIES:\n\n1. This addendum is legally binding and forms part of my Last Will and Testament.\n2. The cryptocurrency assets listed above are to be distributed according to my will.\n3. Access to these assets requires the private keys or seed phrases stored separately.\n4. Beneficiaries should consult with a cryptocurrency-knowledgeable attorney.\n5. All assets should be properly reported for tax purposes.\n\nLEGAL COMPLIANCE:\n\nThis document has been prepared in accordance with the laws of ${userData.state} and the Revised Uniform Fiduciary Access to Digital Assets Act (RUFADAA).\n\nExecuted on: ${new Date().toLocaleDateString()}\n\nSignature: _________________________\n${userData.first_name} ${userData.last_name}\n\nNotary Section:\n[To be completed by notary public]\n\nState of ${userData.state}\nCounty of _______________\n\nOn this _____ day of _________, 20__, before me personally appeared ${userData.first_name} ${userData.last_name}, who proved to me on the basis of satisfactory evidence to be the person whose name is subscribed to the within instrument and acknowledged to me that he/she executed the same in his/her authorized capacity, and that by his/her signature on the instrument the person, or the entity upon behalf of which the person acted, executed the instrument.\n\nI certify under PENALTY OF PERJURY under the laws of the State of ${userData.state} that the foregoing paragraph is true and correct.\n\nWITNESS my hand and official seal.\n\nSignature: _________________________\nNotary Public\n`;\n\n// Update document with generated content\nconst completedDocument = {\n  ...documentMeta,\n  content: documentContent,\n  status: 'completed',\n  completedAt: new Date().toISOString(),\n  wordCount: documentContent.split(' ').length,\n  pageCount: Math.ceil(documentContent.length / 3000) // Estimate pages\n};\n\nreturn {\n  success: true,\n  document: completedDocument,\n  user: userData,\n  assets: userAssets\n};"
      },
      "id": "generate-document-content",
      "name": "Generate Document Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        1200
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "table": "generated_documents",
        "columns": "id, user_id, document_type, title, content, status, created_at, completed_at, word_count, page_count, version",
        "additionalFields": {}
      },
      "id": "save-document-db",
      "name": "Save Document to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1340,
        1200
      ],
      "credentials": {
        "postgres": {
          "id": "postgres-lastwish",
          "name": "Last Wish Database"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "noreply@lastwish.platform",
        "toEmail": "={{ $node['Generate Document Content'].json.user.email }}",
        "subject": "Your Cryptocurrency Estate Planning Document is Ready",
        "emailType": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document Ready</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; margin: 0; padding: 20px; }\n        .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; }\n        .logo { font-size: 28px; font-weight: bold; background: linear-gradient(135deg, #3b82f6, #8b5cf6); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }\n        .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 15px; border-radius: 5px; margin: 20px 0; }\n        .button { display: inline-block; padding: 15px 30px; background: linear-gradient(135deg, #3b82f6, #8b5cf6); color: white; text-decoration: none; border-radius: 5px; font-weight: bold; margin: 20px 0; }\n        .details { background: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; }\n        .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; text-align: center; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <div class=\"logo\">Last Wish</div>\n            <h2>Your Document is Ready!</h2>\n        </div>\n        \n        <div class=\"success\">\n            <strong>✅ Document Generated Successfully!</strong><br>\n            Your cryptocurrency estate planning document has been created.\n        </div>\n        \n        <p>Dear {{ $node['Generate Document Content'].json.user.first_name }},</p>\n        \n        <p>Your personalized cryptocurrency estate planning addendum has been successfully generated and is ready for review.</p>\n        \n        <div class=\"details\">\n            <h3>Document Details</h3>\n            <p><strong>Document Type:</strong> {{ $node['Generate Document Content'].json.document.documentType }}</p>\n            <p><strong>Pages:</strong> {{ $node['Generate Document Content'].json.document.pageCount }}</p>\n            <p><strong>Word Count:</strong> {{ $node['Generate Document Content'].json.document.wordCount }}</p>\n            <p><strong>Generated:</strong> {{ $node['Generate Document Content'].json.document.completedAt }}</p>\n        </div>\n        \n        <div style=\"text-align: center;\">\n            <a href=\"https://lastwish.platform/documents/{{ $node['Generate Document Content'].json.document.id }}\" class=\"button\">View Document</a>\n        </div>\n        \n        <p><strong>Next Steps:</strong></p>\n        <ul>\n            <li>Review your document carefully</li>\n            <li>Print the document for notarization</li>\n            <li>Have the document notarized according to your state's requirements</li>\n            <li>Store the notarized document with your other estate planning documents</li>\n        </ul>\n        \n        <p><strong>Important:</strong> This document must be properly executed (signed and notarized) according to your state's laws to be legally valid.</p>\n        \n        <div class=\"footer\">\n            <p>Last Wish Platform | Secure Your Crypto Legacy</p>\n            <p>Questions? Contact us at support@lastwish.platform</p>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "send-document-ready-notification",
      "name": "Send Document Ready Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1560,
        1200
      ],
      "credentials": {
        "smtp": {
          "id": "smtp-lastwish",
          "name": "Last Wish SMTP"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"Document generated successfully\",\n  \"documentId\": $node['Generate Document Content'].json.document.id,\n  \"documentUrl\": `https://lastwish.platform/documents/${$node['Generate Document Content'].json.document.id}`,\n  \"status\": \"completed\",\n  \"pageCount\": $node['Generate Document Content'].json.document.pageCount,\n  \"wordCount\": $node['Generate Document Content'].json.document.wordCount\n} }}"
      },
      "id": "document-generation-response",
      "name": "Document Generation Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        1200
      ]
    }
  ],
  "connections": {
    "User Registration Webhook": {
      "main": [
        [
          {
            "node": "Process Registration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Registration": {
      "main": [
        [
          {
            "node": "Save User to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save User to Database": {
      "main": [
        [
          {
            "node": "Send Verification Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Verification Email": {
      "main": [
        [
          {
            "node": "Registration Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Verification Webhook": {
      "main": [
        [
          {
            "node": "Process Verification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Verification": {
      "main": [
        [
          {
            "node": "Verify User in Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify User in Database": {
      "main": [
        [
          {
            "node": "Verification Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wallet Connect Webhook": {
      "main": [
        [
          {
            "node": "Process Wallet Connection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Wallet Connection": {
      "main": [
        [
          {
            "node": "Save Wallet to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Wallet to Database": {
      "main": [
        [
          {
            "node": "Fetch Wallet Balance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Wallet Balance": {
      "main": [
        [
          {
            "node": "Process Asset Discovery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Asset Discovery": {
      "main": [
        [
          {
            "node": "Save Assets to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Assets to Database": {
      "main": [
        [
          {
            "node": "Wallet Connect Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Payment Process Webhook": {
      "main": [
        [
          {
            "node": "Process Payment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Payment": {
      "main": [
        [
          {
            "node": "Save Payment to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Payment to Database": {
      "main": [
        [
          {
            "node": "Simulate Payment Gateway",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simulate Payment Gateway": {
      "main": [
        [
          {
            "node": "Update Payment Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Payment Status": {
      "main": [
        [
          {
            "node": "Payment Success Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Payment Success Check": {
      "main": [
        [
          {
            "node": "Send Payment Confirmation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Payment Failure Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Payment Confirmation": {
      "main": [
        [
          {
            "node": "Payment Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Document Webhook": {
      "main": [
        [
          {
            "node": "Process Document Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Document Generation": {
      "main": [
        [
          {
            "node": "Fetch User Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch User Data": {
      "main": [
        [
          {
            "node": "Fetch User Assets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch User Assets": {
      "main": [
        [
          {
            "node": "Generate Document Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Document Content": {
      "main": [
        [
          {
            "node": "Save Document to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Document to Database": {
      "main": [
        [
          {
            "node": "Send Document Ready Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Document Ready Notification": {
      "main": [
        [
          {
            "node": "Document Generation Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-31T01:45:00.000Z",
      "updatedAt": "2025-01-31T01:45:00.000Z",
      "id": "lastwish-platform",
      "name": "Last Wish Platform"
    }
  ],
  "triggerCount": 5,
  "updatedAt": "2025-01-31T01:45:00.000Z",
  "versionId": "1"
}

