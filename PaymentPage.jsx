import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { 
  CreditCard, 
  Bitcoin, 
  Wallet, 
  Check, 
  Clock, 
  AlertCircle,
  Shield,
  Zap,
  Globe,
  Star,
  ArrowRight,
  Copy,
  ExternalLink,
  RefreshCw
} from 'lucide-react'
import { useAuth } from '@/contexts/AuthContext'
import { usePayment } from '@/contexts/PaymentContext'
import { toast } from 'sonner'

export function PaymentPage() {
  const { user } = useAuth()
  const { paymentStatus, selectedPlan: contextSelectedPlan, processPayment } = usePayment()
  const [localSelectedPlan, setLocalSelectedPlan] = useState(null)
  const [paymentMethod, setPaymentMethod] = useState('crypto')
  const [paymentStep, setPaymentStep] = useState('select') // select, payment
  const [paymentData, setPaymentData] = useState({
    cryptoCurrency: 'BTC',
    address: '',
  })
  const [cryptoRates, setCryptoRates] = useState({
    BTC: 45000,
    ETH: 2800,
    USDT: 1.00,
    USDC: 1.00
  })

  // Pricing plans
  const plans = [
    {
      id: 'basic',
      name: 'Basic Addendum',
      price: 29.99,
      description: 'Single cryptocurrency addendum',
      features: [
        'One cryptocurrency addendum',
        'PDF generation',
        'Basic legal templates',
        'Email support',
        'Standard processing (24-48 hours)'
      ],
      popular: false
    },
    {
      id: 'premium',
      name: 'Premium Package',
      price: 79.99,
      description: 'Complete estate planning solution',
      features: [
        'Unlimited cryptocurrency addendums',
        'Advanced legal templates',
        'Multi-wallet support',
        'Priority support',
        'Express processing (2-4 hours)',
        'Legal review assistance',
        'Document versioning',
        'Secure cloud storage'
      ],
      popular: true
    },
    {
      id: 'enterprise',
      name: 'Enterprise Solution',
      price: 199.99,
      description: 'For financial advisors and law firms',
      features: [
        'White-label solution',
        'Bulk document generation',
        'Custom legal templates',
        'API access',
        'Dedicated account manager',
        'Same-day processing',
        'Advanced compliance features',
        'Custom integrations'
      ],
      popular: false
    }
  ]

  // Supported cryptocurrencies
  const supportedCryptos = [
    { symbol: 'BTC', name: 'Bitcoin', icon: '₿' },
    { symbol: 'ETH', name: 'Ethereum', icon: 'Ξ' },
    { symbol: 'USDT', name: 'Tether', icon: '₮' },
    { symbol: 'USDC', name: 'USD Coin', icon: '$' }
  ]

  // Mock payment addresses (in production, these would be generated by the payment processor)
  const paymentAddresses = {
    BTC: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
    ETH: '0x742d35Cc6634C0532925a3b8D0C9e3e0C8b0e5b2',
    USDT: '0x742d35Cc6634C0532925a3b8D0C9e3e0C8b0e5b2',
    USDC: '0x742d35Cc6634C0532925a3b8D0C9e3e0C8b0e5b2'
  }

  // Calculate crypto amount
  const calculateCryptoAmount = (usdAmount, cryptoSymbol) => {
    const rate = cryptoRates[cryptoSymbol]
    return (usdAmount / rate).toFixed(8)
  }

  // Handle plan selection
  const selectPlan = (plan) => {
    setLocalSelectedPlan(plan)
    setPaymentStep('payment')
  }

  // Handle payment method change
  const handlePaymentMethodChange = (method) => {
    setPaymentMethod(method)
  }

  // Handle crypto currency change
  const handleCryptoChange = (crypto) => {
    setPaymentData(prev => ({
      ...prev,
      cryptoCurrency: crypto,
      address: paymentAddresses[crypto]
    }))
  }

  // Copy address to clipboard
  const copyAddress = () => {
    navigator.clipboard.writeText(paymentData.address)
    toast.success('Payment address copied to clipboard!')
  }

  // Simulate payment processing
  const processPayment = () => {
    setPaymentStep('processing')
    
    // Simulate payment processing delay
    setTimeout(() => {
      setPaymentData(prev => ({
        ...prev,
        status: 'completed',
        txHash: '0x' + Math.random().toString(16).substr(2, 64)
      }))
      setPaymentStep('complete')
      toast.success('Payment processed successfully!')
    }, 3000)
  }

  // Mock function to check payment status
  const checkPaymentStatus = () => {
    toast.info('Checking payment status...')
    // In production, this would call the payment processor API
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-white mb-2">Choose Your Plan</h1>
        <p className="text-gray-400">Select the perfect plan for your cryptocurrency estate planning needs.</p>
      </div>

      {/* Step 1: Plan Selection */}
      {paymentStatus === 'pending' && paymentStep === 'select' && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {plans.map((plan) => (
            <Card 
              key={plan.id} 
              className={`bg-gray-900 border-gray-800 relative ${
                plan.popular ? 'border-blue-500 shadow-lg shadow-blue-500/20' : ''
              }`}
            >
              {plan.popular && (
                <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                  <Badge className="bg-blue-600 text-white px-3 py-1">
                    <Star className="mr-1 h-3 w-3" />
                    Most Popular
                  </Badge>
                </div>
              )}
              
              <CardHeader className="text-center">
                <CardTitle className="text-white text-xl">{plan.name}</CardTitle>
                <div className="text-3xl font-bold text-white mt-2">
                  ${plan.price}
                  <span className="text-sm text-gray-400 font-normal">/one-time</span>
                </div>
                <p className="text-gray-400 text-sm">{plan.description}</p>
              </CardHeader>
              
              <CardContent className="space-y-4">
                <ul className="space-y-2">
                  {plan.features.map((feature, index) => (
                    <li key={index} className="flex items-center text-sm">
                      <Check className="h-4 w-4 text-green-400 mr-2 flex-shrink-0" />
                      <span className="text-gray-300">{feature}</span>
                    </li>
                  ))}
                </ul>
                
                <Button
                  onClick={() => selectPlan(plan)}
                  className={`w-full ${
                    plan.popular 
                      ? 'bg-blue-600 hover:bg-blue-700' 
                      : 'bg-gray-700 hover:bg-gray-600'
                  }`}
                >
                  Get Started
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* Step 2: Payment Method Selection */}
      {paymentStatus === 'pending' && paymentStep === 'payment' && localSelectedPlan && (
        <div className="max-w-4xl mx-auto space-y-6">
          {/* Order Summary */}
          <Card className="bg-gray-900 border-gray-800">
            <CardHeader>
              <CardTitle className="text-white">Order Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="text-white font-medium">{localSelectedPlan.name}</h3>
                  <p className="text-gray-400 text-sm">{localSelectedPlan.description}</p>
                </div>
                <div className="text-right">
                  <p className="text-2xl font-bold text-white">${localSelectedPlan.price}</p>
                  <p className="text-gray-400 text-sm">One-time payment</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Payment Method Selection */}
          <Card className="bg-gray-900 border-gray-800">
            <CardHeader>
              <CardTitle className="text-white">Payment Method</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Button
                  onClick={() => handlePaymentMethodChange('crypto')}
                  variant={paymentMethod === 'crypto' ? 'default' : 'outline'}
                  className={`h-16 ${
                    paymentMethod === 'crypto' 
                      ? 'bg-blue-600 hover:bg-blue-700 border-blue-500' 
                      : 'border-gray-600 text-gray-300 hover:bg-gray-800'
                  }`}
                >
                  <Bitcoin className="mr-3 h-6 w-6" />
                  <div className="text-left">
                    <div className="font-medium">Cryptocurrency</div>
                    <div className="text-xs opacity-75">Bitcoin, Ethereum, USDT, USDC</div>
                  </div>
                </Button>
                
                <Button
                  onClick={() => handlePaymentMethodChange('card')}
                  variant={paymentMethod === 'card' ? 'default' : 'outline'}
                  className={`h-16 ${
                    paymentMethod === 'card' 
                      ? 'bg-blue-600 hover:bg-blue-700 border-blue-500' 
                      : 'border-gray-600 text-gray-300 hover:bg-gray-800'
                  }`}
                  disabled
                >
                  <CreditCard className="mr-3 h-6 w-6" />
                  <div className="text-left">
                    <div className="font-medium">Credit Card</div>
                    <div className="text-xs opacity-75">Coming Soon</div>
                  </div>
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Cryptocurrency Payment */}
          {paymentMethod === 'crypto' && (
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-white">Cryptocurrency Payment</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Crypto Selection */}
                <div>
                  <Label className="text-gray-400 mb-3 block">Select Cryptocurrency</Label>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    {supportedCryptos.map((crypto) => (
                      <Button
                        key={crypto.symbol}
                        onClick={() => handleCryptoChange(crypto.symbol)}
                        variant={paymentData.cryptoCurrency === crypto.symbol ? 'default' : 'outline'}
                        className={`h-16 ${
                          paymentData.cryptoCurrency === crypto.symbol 
                            ? 'bg-blue-600 hover:bg-blue-700 border-blue-500' 
                            : 'border-gray-600 text-gray-300 hover:bg-gray-800'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-2xl mb-1">{crypto.icon}</div>
                          <div className="text-xs">{crypto.symbol}</div>
                        </div>
                      </Button>
                    ))}
                  </div>
                </div>

                {/* Payment Details */}
                <div className="bg-gray-800 rounded-lg p-6 space-y-4">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Amount (USD)</span>
                    <span className="text-white font-medium">${localSelectedPlan.price}</span>
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <span className="text-gray-400">Amount ({paymentData.cryptoCurrency})</span>
                    <span className="text-white font-medium">
                      {calculateCryptoAmount(localSelectedPlan.price, paymentData.cryptoCurrency)} {paymentData.cryptoCurrency}
                    </span>
                  </div>
                  
                  <Separator className="bg-gray-700" />
                  
                  <div>
                    <Label className="text-gray-400 mb-2 block">Payment Address</Label>
                    <div className="flex items-center gap-2">
                      <Input
                        value={paymentData.address}
                        readOnly
                        className="bg-gray-700 border-gray-600 text-white font-mono text-sm"
                      />
                      <Button
                        onClick={copyAddress}
                        size="sm"
                        variant="outline"
                        className="border-gray-600 text-gray-300 hover:bg-gray-700"
                      >
                        <Copy className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                  
                  <div className="bg-yellow-900/20 border border-yellow-700 rounded-lg p-4">
                    <div className="flex items-center gap-2 mb-2">
                      <AlertCircle className="h-5 w-5 text-yellow-400" />
                      <span className="text-yellow-400 font-medium">Important Instructions</span>
                    </div>
                    <ul className="text-yellow-300 text-sm space-y-1">
                      <li>• Send exactly {calculateCryptoAmount(localSelectedPlan.price, paymentData.cryptoCurrency)} {paymentData.cryptoCurrency} to the address above</li>
                      <li>• Payment will be confirmed within 1-3 network confirmations</li>
                      <li>• Do not send any other cryptocurrency to this address</li>
                      <li>• Keep your transaction hash for reference</li>
                    </ul>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex gap-4">
                  <Button
                    onClick={() => setPaymentStep('select')}
                    variant="outline"
                    className="border-gray-600 text-gray-300 hover:bg-gray-800"
                  >
                    Back to Plans
                  </Button>
                  
                  <Button
                    onClick={() => processPayment(localSelectedPlan)}
                    className="bg-green-600 hover:bg-green-700 flex-1"
                  >
                    <Wallet className="mr-2 h-4 w-4" />
                    I've Sent the Payment
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      )}

      {/* Step 3: Processing */}
      {paymentStatus === 'processing' && (
        <div className="max-w-2xl mx-auto">
          <Card className="bg-gray-900 border-gray-800">
            <CardContent className="p-8 text-center">
              <div className="animate-spin h-16 w-16 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-6"></div>
              <h3 className="text-xl font-semibold text-white mb-2">Processing Payment</h3>
              <p className="text-gray-400 mb-6">
                We're confirming your cryptocurrency payment. This usually takes 1-3 network confirmations.
              </p>
              
              <div className="bg-gray-800 rounded-lg p-4 mb-6">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-gray-400">Status</span>
                  <Badge variant="outline" className="border-yellow-500 text-yellow-400">
                    <Clock className="mr-1 h-3 w-3" />
                    Pending
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Amount</span>
                  <span className="text-white">
                    {calculateCryptoAmount(contextSelectedPlan.price, paymentData.cryptoCurrency)} {paymentData.cryptoCurrency}
                  </span>
                </div>
              </div>
              
              <Button
                onClick={checkPaymentStatus}
                variant="outline"
                className="border-gray-600 text-gray-300 hover:bg-gray-800"
              >
                <RefreshCw className="mr-2 h-4 w-4" />
                Check Status
              </Button>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Step 4: Payment Complete */}
      {paymentStatus === 'completed' && (
        <div className="max-w-2xl mx-auto">
          <Card className="bg-gray-900 border-gray-800">
            <CardContent className="p-8 text-center">
              <div className="h-16 w-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6">
                <Check className="h-8 w-8 text-white" />
              </div>
              
              <h3 className="text-2xl font-semibold text-white mb-2">Payment Successful!</h3>
              <p className="text-gray-400 mb-6">
                Your payment has been confirmed and your {contextSelectedPlan?.name} is now active.
              </p>
              
              <div className="bg-gray-800 rounded-lg p-6 mb-6 space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Plan</span>
                  <span className="text-white font-medium">{contextSelectedPlan?.name}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Amount Paid</span>
                  <span className="text-white font-medium">
                    {calculateCryptoAmount(contextSelectedPlan.price, paymentData.cryptoCurrency)} {paymentData.cryptoCurrency}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Transaction Hash</span>
                  <div className="flex items-center gap-2">
                    <span className="text-white font-mono text-sm">
                      {paymentData.txHash?.substring(0, 10)}...{paymentData.txHash?.substring(-8)}
                    </span>
                    <Button
                      size="sm"
                      variant="ghost"
                      className="h-6 w-6 p-0"
                    >
                      <ExternalLink className="h-3 w-3" />
                    </Button>
                  </div>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Status</span>
                  <Badge className="bg-green-600 text-white">
                    <Check className="mr-1 h-3 w-3" />
                    Confirmed
                  </Badge>
                </div>
              </div>
              
              <div className="space-y-3">
                <Button
                  onClick={() => window.location.href = '/app/addendum'}
                  className="w-full bg-blue-600 hover:bg-blue-700"
                >
                  Create Your Addendum
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
                
                <Button
                  onClick={() => window.location.href = '/app/dashboard'}
                  variant="outline"
                  className="w-full border-gray-600 text-gray-300 hover:bg-gray-800"
                >
                  Go to Dashboard
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Features Section */}
      {paymentStep === 'select' && (
        <div className="mt-16">
          <h2 className="text-2xl font-bold text-white text-center mb-8">Why Choose Last Wish?</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card className="bg-gray-900 border-gray-800">
              <CardContent className="p-6 text-center">
                <Shield className="h-12 w-12 text-blue-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-white mb-2">Bank-Level Security</h3>
                <p className="text-gray-400 text-sm">
                  Your sensitive information is protected with AES-256 encryption and secure storage.
                </p>
              </CardContent>
            </Card>
            
            <Card className="bg-gray-900 border-gray-800">
              <CardContent className="p-6 text-center">
                <Zap className="h-12 w-12 text-green-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-white mb-2">Fast Processing</h3>
                <p className="text-gray-400 text-sm">
                  Get your legal documents generated and ready for notarization within hours.
                </p>
              </CardContent>
            </Card>
            
            <Card className="bg-gray-900 border-gray-800">
              <CardContent className="p-6 text-center">
                <Globe className="h-12 w-12 text-purple-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-white mb-2">Global Compliance</h3>
                <p className="text-gray-400 text-sm">
                  Our templates are designed to meet legal requirements across all US states.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      )}
    </div>
  )
}

